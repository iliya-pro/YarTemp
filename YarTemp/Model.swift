//
//  Model.swift
//  YarTemp
//
//  Created by Iliya Prostakishin on 16.04.2024.
//

import Foundation

// MARK: - Data string, contains numbers, separated by semicolons

private extension String {
    // MARK: Data string example
    // 3.833;1666900230;0.212;6.646;1666869475;1.332;1666841275;6.0732;3.28471111111111;758.6;-1.0;0.0
    static let fieldsCount = 12
    // MARK: Known values
    // 0  - temperature, celsius
    // 1  - update time
    // 2  - temperature change, in hour
    // 3  - max day temperature
    // 4  - time of max day temperature
    // 5  - min day temperature
    // 6  - time of min day temperature
    // 7  - temperature in last year
    // 8  - average day temperature
    // 9  - pressure, millimeters of mercury
    // 10 - sun intensity %
    // 11 - pressure change, in hour
    enum Fields: Int {
        case temperature            = 0
        case temperatureChange      = 2
        case temperatureDayMax      = 3
        case temperatureDayMin      = 5
        case temperatureDayLastYear = 7
        case temperatureDayAverage  = 8
        case pressure               = 9
        case sunIntensity           = 10
        case pressureChange         = 11
    }
    func extract(_ field: Fields) throws -> Double? {
        let dataArray = self.components(separatedBy: ";")
        if dataArray.count != String.fieldsCount {
            throw ModelError.unexpectedDataSize(found: dataArray.count,
                                                needed: String.fieldsCount)
        }
        return Double(dataArray[field.rawValue])
    }
}

typealias DataString = String

// MARK: - Errors, generated by view model

/// Represents an error.
enum ModelError: LocalizedError {
    /// Request failed. No internet connection or server is down.
    case requestFailed
    /// Unexpected data size: `found` size is not coincide with `needed`.
    case unexpectedDataSize(found: Int, needed: Int)
    /// Unexpected error.
    case unexpectedError(_ error: Error)

    /// Undefined temperature.
    case undefinedTemperature
    /// Temperature is too high (≥ `max`).
    case temperatureTooHigh(_ temperature: Double, max: Double)
    /// Temperature is too low (≤ `min`).
    case temperatureTooLow (_ temperature: Double, min: Double)
    
    /// Undefined temperature change.
    case undefinedTemperatureChange
    /// Temperature change is too high (≥ `max`).
    case temperatureChangeTooHigh(_ change: Double, max: Double)
    /// Temperature change is too low (≤ `min`).
    case temperatureChangeTooLow (_ change: Double, min: Double)

    /// Undefined day min temperature.
    case undefinedTemperatureDayMin
    /// Day min temperature is too high (≥ `max`).
    case temperatureDayMinTooHigh(_ change: Double, max: Double)
    /// Day min temperature is too low (≤ `min`).
    case temperatureDayMinTooLow(_ change: Double, min: Double)

    /// Undefined day max temperature.
    case undefinedTemperatureDayMax
    /// Day max temperature is too high (≥ `max`).
    case temperatureDayMaxTooHigh(_ change: Double, max: Double)
    /// Day max temperature is too low (≤ `min`).
    case temperatureDayMaxTooLow(_ change: Double, min: Double)

    /// Undefined day average temperature.
    case undefinedTemperatureDayAverage
    /// Average temperature is too high (≥ `max`).
    case temperatureDayAverageTooHigh(_ change: Double, max: Double)
    /// Average temperature is too low (≤ `min`).
    case temperatureDayAverageTooLow(_ change: Double, min: Double)
    
    /// Undefined day last year temperature.
    case undefinedTemperatureDayLastYear
    /// Day last year temperature is too high (≥ `max`).
    case temperatureDayLastYearTooHigh(_ change: Double, max: Double)
    /// Day last year temperature is too low (≤ `min`).
    case temperatureDayLastYearTooLow(_ change: Double, min: Double)
 
    /// Undefined pressure.
    case undefinedPressure
    /// Pressure is too high (≥ `max`).
    case pressureTooHigh(_ pressure: Double, max: Double)
    /// Pressure is too low (≤ `min`).
    case pressureTooLow (_ pressure: Double, min: Double)
    
    /// Undefined pressure change.
    case undefinedPressureChange
    /// Pressure change is too high (≥ `max`).
    case pressureChangeTooHigh(_ pressure: Double, max: Double)
    /// Pressure change is too low (≤ `min`).
    case pressureChangeTooLow (_ pressure: Double, min: Double)
    
    var errorDescription: String? {
        switch self {
        case .requestFailed:
            return String(localized: "Request failed. No internet connection or server is down", comment: "Request error")
        case .unexpectedDataSize(let sizeFound, let sizeNeeded):
            return String.localizedStringWithFormat(String(localized: "Unexpected data. Parameters found: %d, needed: %d", comment: "Data error"), sizeFound, sizeNeeded)
        case .unexpectedError(let error):
            return String.localizedStringWithFormat(String(localized: "Unexpected error: %@", comment: "Unexpected error"), error.localizedDescription)

        case .undefinedTemperature:
            return String(localized: "Undefined temperature value", comment: "Temperature error")
        case .temperatureTooHigh(let val, let max):
            return String.localizedStringWithFormat(String(localized: "Temperature %g shouldn't be ≥ %g", comment: "Temperature error"), val, max)
        case .temperatureTooLow(let val, let min):
            return String.localizedStringWithFormat(String(localized: "Temperature %g shouldn't be ≤ %g", comment: "Temperature error"), val, min)
            
        case .undefinedTemperatureChange:
            return String(localized: "Undefined temperature change value", comment: "Temperature error")
        case .temperatureChangeTooHigh(let val, let max):
            return String.localizedStringWithFormat(String(localized: "Temperature change %g shouldn't be ≥ %g", comment: "Temperature change error"), val, max)
        case .temperatureChangeTooLow(let val, let min):
            return String.localizedStringWithFormat(String(localized: "Temperature change %g shouldn't be ≤ %g", comment: "Temperature change error"), val, min)

        case .undefinedTemperatureDayMin:
            return String(localized: "Undefined day min temperature value", comment: "Average temperature error")
        case .temperatureDayMinTooHigh(let val, let max):
            return String.localizedStringWithFormat(String(localized: "Day min temperature %g shouldn't be ≥ %g", comment: "Day min temperature error"), val, max)
        case .temperatureDayMinTooLow(let val, let min):
            return String.localizedStringWithFormat(String(localized: "Day min temperature %g shouldn't be ≤ %g", comment: "Day min temperature error"), val, min)

        case .undefinedTemperatureDayMax:
            return String(localized: "Undefined day max temperature value", comment: "Average temperature error")
        case .temperatureDayMaxTooHigh(let val, let max):
            return String.localizedStringWithFormat(String(localized: "Day max temperature %g shouldn't be ≥ %g", comment: "Day max temperature error"), val, max)
        case .temperatureDayMaxTooLow(let val, let min):
            return String.localizedStringWithFormat(String(localized: "Day max temperature %g shouldn't be ≤ %g", comment: "Day max temperature error"), val, min)

        case .undefinedTemperatureDayAverage:
            return String(localized: "Undefined day average temperature value", comment: "Average temperature error")
        case .temperatureDayAverageTooHigh(let val, let max):
            return String.localizedStringWithFormat(String(localized: "Day average temperature %g shouldn't be ≥ %g", comment: "Day average temperature error"), val, max)
        case .temperatureDayAverageTooLow(let val, let min):
            return String.localizedStringWithFormat(String(localized: "Day average temperature %g shouldn't be ≤ %g", comment: "Day average temperature error"), val, min)
  
        case .undefinedTemperatureDayLastYear:
            return String(localized: "Undefined day last year temperature value", comment: "Day last year temperature error")
        case .temperatureDayLastYearTooHigh(let val, let max):
            return String.localizedStringWithFormat(String(localized: "Day last year temperature %g shouldn't be ≥ %g", comment: "Day last year temperature error"), val, max)
        case .temperatureDayLastYearTooLow(let val, let min):
            return String.localizedStringWithFormat(String(localized: "Day last year temperature %g shouldn't be ≤ %g", comment: "Day last year temperature error"), val, min)

        case .undefinedPressure:
            return String(localized: "Undefined pressure value", comment: "Pressure error")
        case .pressureTooHigh(let val, let max):
            return String.localizedStringWithFormat(String(localized: "Pressure %g shouldn't be ≥ %g", comment: "Pressure error"), val, max)
        case .pressureTooLow(let val, let min):
            return String.localizedStringWithFormat(String(localized: "Pressure %g shouldn't be ≤ %g", comment: "Pressure error"), val, min)

        case .undefinedPressureChange:
            return String(localized: "Undefined pressure change value", comment: "Pressure change error")
        case .pressureChangeTooHigh(let val, let max):
            return String.localizedStringWithFormat(String(localized: "Pressure change %g shouldn't be ≥ %g", comment: "Pressure change error"), val, max)
        case .pressureChangeTooLow(let val, let min):
            return String.localizedStringWithFormat(String(localized: "Pressure change %g shouldn't be ≤ %g", comment: "Pressure change error"), val, min)
        }
    }
}

// MARK: - YarTemp view model

/// Provides acces to [YarTemp service](http://yartemp.com/data) to get current temperature and other data.
///
/// The main function is ``YarTempViewModel/refresh(offline:by:)``. Call it, then use the following
/// properties to access values you needed:
/// Property  | Description
/// ------------ | ---------------
/// `temperature` | Temperature, in celsius.
/// `temperatureChange` | Temperature change, hourly, in celsius.
/// `temperatureDayMin` | Whole day minimum temperature, in celsius.
/// `temperatureDayMax` | Whole day maximum temperature, in celsius.
/// `temperatureDayAverage` | Whole day average temperature, in celsius.
/// `temperatureDayLastYear` | Whole day average temperature in last year, in celsius.
/// `pressure`| Atmospheric pressure, millimeters of mercury.
/// `pressureChange`| Atmospheric pressure change, hourly, millimeters of mercury.
/// `error`| Model error, if any. See ``ModelError`` for details.
class YarTempViewModel : ObservableObject {
    typealias Temperature = Measurement<UnitTemperature>
    typealias Pressure = Measurement<UnitPressure>

    /// Temperature, in celsius.
    @Published private(set) var temperature = Temperature(value: 0, unit: .celsius)
    ///  Temperature change, hourly, in celsius.
    @Published private(set) var temperatureChange = Temperature(value: 0, unit: .celsius)
    /// Day min  temperature, in celsius.
    @Published private(set) var temperatureDayMin = Temperature(value: 0, unit: .celsius)
    /// Day max  temperature, in celsius.
    @Published private(set) var temperatureDayMax = Temperature(value: 0, unit: .celsius)
    /// Day average temperature, in celsius.
    @Published private(set) var temperatureDayAverage = Temperature(value: 0, unit: .celsius)
    /// Temperature last year, in celsius.
    @Published private(set) var temperatureDayLastYear = Temperature(value: 0, unit: .celsius)
    /// Atmospheric pressure, millimeters of mercury.
    @Published private(set) var pressure = Pressure(value: 0, unit: .millimetersOfMercury)
    /// Atmospheric pressure change, hourly, millimeters of mercury.
    @Published private(set) var pressureChange = Pressure(value: 0, unit: .millimetersOfMercury)
    /// Model error, if any.
    ///
    /// If there is an error during model refresh (`error != nil`), use `localizedDescription` to get the error description.
    @Published private(set) var error: ModelError?
    
    /// Defines input from command line.
    ///
    /// - Note: Used by App to initialize data from command line to run UI tests.
    ///         **Do not** use it to any other purposes.
    var commandLineInput: DataString? = nil
    
    /// Defines refresher.
    enum Refresher {
        /// User, that urgently needs fresh data directly from the server
        /// (not from the local cashe).
        case user
        /// Not specified.
        case none
    }
    
    /// Refreshes the model by getting data from YarTemp service.
    /// - Parameters:
    ///   - input: offline data string (for testing, when Internet connection is unavailable).
    ///   - actor: set `.user` if refreshing initiated by user (e.g. by clicking on the button) or `.none` otherwise (default).
    @MainActor
    func refresh(offline input: DataString? = nil, by refresher: Refresher = .none) async {
        
        // MARK: Get/parse data string.
        
        self.error =  nil
        
        do {
            try await refreshInternal(offline: input, by: refresher)
        } catch let error as ModelError {
            self.error = error
        }
        catch {
            self.error = ModelError.unexpectedError(error)
        }
    }
    @MainActor
    private func refreshInternal(offline input: DataString? = nil, by refresher: Refresher = .none) async throws {
        var data: DataString? = nil
        if let input {
            data = input
        } else if commandLineInput != nil {
            data = commandLineInput
            commandLineInput = nil
        }
        if data == nil {
            let url = URL(string: "https://yartemp.com/data")!
            var policy = URLRequest.CachePolicy.useProtocolCachePolicy
            if refresher == .user {
                policy = .reloadIgnoringLocalCacheData
            }
            let request = URLRequest(url: url, cachePolicy: policy)
            do {
                let (response, _) = try await URLSession.shared.data(for: request)
                data = String(data: response, encoding: .utf8)
            } catch {
                throw ModelError.requestFailed
            }
        }
        guard let temperature = try data?.extract(.temperature) else {
            throw ModelError.undefinedTemperature
        }
        guard let temperatureChange = try data?.extract(.temperatureChange) else {
            throw ModelError.undefinedTemperatureChange
        }
        guard let temperatureDayMin = try data?.extract(.temperatureDayMin) else {
            throw ModelError.undefinedTemperatureDayMin
        }
        guard let temperatureDayMax = try data?.extract(.temperatureDayMax) else {
            throw ModelError.undefinedTemperatureDayMax
        }
        guard let temperatureDayAverage = try data?.extract(.temperatureDayAverage) else {
            throw ModelError.undefinedTemperatureDayAverage
        }
        guard let temperatureDayLastYear = try data?.extract(.temperatureDayLastYear) else {
            throw ModelError.undefinedTemperatureDayLastYear
        }
        guard let pressure = try data?.extract(.pressure) else {
            throw ModelError.undefinedPressure
        }
        guard let pressureChange = try data?.extract(.pressureChange) else {
            throw ModelError.undefinedPressureChange
        }

        if temperature >= 100.0 {
            throw ModelError.temperatureTooHigh(temperature, max: 100.0)
        }
        else if temperature <= -100.0 {
            throw ModelError.temperatureTooLow(temperature, min: -100.0)
        }
        if temperatureChange >= 100.0 {
            throw ModelError.temperatureChangeTooHigh(temperatureChange, max: 100.0)
        }
        else if temperatureChange <= -100.0 {
            throw ModelError.temperatureChangeTooLow(temperatureChange, min: -100.0)
        }
        if temperatureDayMin >= 100.0 {
            throw ModelError.temperatureDayMinTooHigh(temperatureDayMin, max: 100.0)
        }
        else if temperatureDayMin <= -100.0 {
            throw ModelError.temperatureDayMinTooLow(temperatureDayMin, min: -100.0)
        }
        if temperatureDayMax >= 100.0 {
            throw ModelError.temperatureDayMaxTooHigh(temperatureDayMax, max: 100.0)
        }
        else if temperatureDayMax <= -100.0 {
            throw ModelError.temperatureDayMaxTooLow(temperatureDayMax, min: -100.0)
        }
        if temperatureDayAverage >= 100.0 {
            throw ModelError.temperatureDayAverageTooHigh(temperatureDayAverage, max: 100.0)
        }
        else if temperatureDayAverage <= -100.0 {
            throw ModelError.temperatureDayAverageTooLow(temperatureDayAverage, min: -100.0)
        }
        if pressure >= 1000.0 {
            throw ModelError.pressureTooHigh(pressure, max: 1000.0)
        }
        else if pressure <= 0.0 {
            throw ModelError.pressureTooLow(pressure, min: 0.0)
        }
        if pressureChange >= 1000.0 {
            throw ModelError.pressureChangeTooHigh(pressureChange, max: 1000.0)
        }
        else if pressureChange <= -1000 {
            throw ModelError.pressureChangeTooLow(pressureChange, min: -1000.0)
        }

        self.temperature.value              = temperature
        self.temperatureChange.value        = temperatureChange
        self.temperatureDayMin.value        = temperatureDayMin
        self.temperatureDayMax.value        = temperatureDayMax
        self.temperatureDayAverage.value    = temperatureDayAverage
        self.temperatureDayLastYear.value   = temperatureDayLastYear
        self.pressure.value                 = pressure
        self.pressureChange.value           = pressureChange
    }
}


